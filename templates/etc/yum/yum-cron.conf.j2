# yum-cron configuration
# vim: ft=conf
#
# {{ ansible_managed }}

[commands]
#  What kind of update to use:
# default                            = yum upgrade
# security                           = yum --security upgrade
# security-severity:Critical         = yum --sec-severity=Critical upgrade
# minimal                            = yum --bugfix update-minimal
# minimal-security                   = yum --security update-minimal
# minimal-security-severity:Critical =  --sec-severity=Critical update-minimal
update_cmd = {{ updates_yum_update_cmd }}

# Whether a message should be emitted when updates are available,
# were downloaded, or applied.
update_messages = {{ updates_yum_update_message | ternary('yes', 'no') }}

# Whether updates should be downloaded when they are available.
download_updates = {{ updates_download | ternary('yes', 'no') }}

# Whether updates should be applied when they are available.  Note
# that download_updates must also be yes for the update to be applied.
apply_updates = {{ updates_apply | ternary('yes', 'no') }}

# Maximum amout of time to randomly sleep, in minutes.  The program
# will sleep for a random amount of time between 0 and random_sleep
# minutes before running.  This is useful for e.g. staggering the
# times that multiple systems will access update servers.  If
# random_sleep is 0 or negative, the program will run immediately.
#  NOTE that we hold up all the other things in cron.daily as we wait,
# so while waiting for 6+ hours is fine for us it might not be nice
# for logrotate (so wait for 2 hours by default).
random_sleep = {{ updates_random_sleep }}


[emitters]
# Name to use for this system in messages that are emitted.  If
# system_name is None, the hostname will be used.
{%- if updates_system_name is defined and updates_system_name | length %}
system_name = "{{ updates_system_name }}"
{% else %}
system_name = None
{% endif -%}

# How to send messages.  Valid options are stdio and email.  If
# emit_via includes stdio, messages will be sent to stdout; this is useful
# to have cron send the messages.  If emit_via includes email, this
# program will send email itself according to the configured options.
# If emit_via is None or left blank, no messages will be sent.
emit_via = {{ updates_emit_via }}

# The width, in characters, that messages that are emitted should be
# formatted to.
output_width = {{ updates_yum_message_output_width }}


[email]
# The address to send email messages from.
# NOTE: 'localhost' will be replaced with the value of system_name.
email_from = {{ updates_email_from }}

# List of addresses to send messages to.
email_to = {{ updates_email_to | join(' ') }}

# Name of the host to connect to to send email messages.
email_host = {{ updates_email_host }}


[groups]
# NOTE: This only works when group_command != objects, which is now the default
# List of groups to update
group_list = None

# The types of group packages to install
group_package_types = mandatory, default

{%- if (updates_yum_base is defined and updates_yum_base | length) or (updates_blackist is defined and updates_blacklist | length) %}
[base]
# This section overrides dnf.conf
exclude = {{ updates_blackist | join(' ') }}
{%- if updates_yum_base is defined and updates_yum_base | length %}
{%- for base in updates_yum_base %}
{{ base.key }}: {{ base.value }}
{% endfor -%}
{% endif -%}

{% endif -%}